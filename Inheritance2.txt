1. When parent class reference refers to the child class object
then the overriding method (method of child class) is called.
This is called dynamic method dispatch and runtime polymorphism

Ex : 
class Car
{
   public int gearRatio = 8;
   public String accelerate() {  return "Accelerate : Car";  }
}
class SportsCar extends Car
{
   public int gearRatio = 9;
   public String accelerate() {  return  "Accelerate : SportsCar";  }
   public static void main(String[] args)
   {
      Car c = new SportsCar();
      System.out.println( c.gearRatio+"  "+c.accelerate() );
   }
}
 Answer =    8  Accelerate : SportsCar   

2.Downcasting is legal in some scenarios where the actual object referred by the parent class is of sub class.

Ex:
Which statements, when inserted at line 1, will cause a runtime exception ? 
class B {}
class B1 extends B {}
class B2 extends B {}
public class ExtendsTest
{
  public static void main(String args[])
  {
     B b = new B();
     B1 b1 = new B1();
     B2 b2 = new B2();
     // insert statement here
  }

Answer =   b1 = (B1) b;   //classCastException(B cannot be cast to B1) Runtime Exception


3.public class Plant {
private String name;
public Plant(String name) { this.name = name; }
public String getName() { return name; }
}
1. public class Tree extends Plant {
2. public void growFruit() { }
3. public void dropLeaves() { }
4. }
Which statement is true?
Answer = The code will compile if public Plant() { this("fern"); } is added to the Plant class.


4.Ex :
class Super {
2. private int a;
3. protected Super(int a) { this.a = a; }
4. }
...
11. class Sub extends Super {
12. public Sub(int a) { super(a); }
13. public Sub() { this.a = 5; }
14. }
Which two, independently, will allow Sub to compile? (Choose two.)
A. Change line 13 to :public Sub() { this(5); }
B. Change line 13 to :public Sub() { super(5); }

5.Ex:
class ClassA {
 public int numberOfInstances;
 protected ClassA(int numberOfInstances) {
 this.numberOfInstances = numberOfInstances;
 }
 }
 public class ExtendedA extends ClassA {
 private ExtendedA(int numberOfInstances) {
 super(numberOfInstances);
 }
 public static void main(String[] args) {
 ExtendedA ext = new ExtendedA(420);
 System.out.print(ext.numberOfInstances);
 }
 }

Answer : 420

6.
Ex : abstract class A {
11. abstract void a1();
12. void a2() { }
13. }
14. class B extends A {
15. void a1() { }
16. void a2() { }
17. }
18. class C extends B { void c1() { } }
and:
A x = new B(); C y = new C(); A z = new C();
What are four valid examples of polymorphic method calls? (Choose four.)

Answer = 
A. x.a2();
B. z.a2();
C. z.a1();
D x.a1();


7.Ex:
class Animal { public String noise() { return "peep"; } }
12. class Dog extends Animal {
13. public String noise() { return "bark"; }
14. }
15. class Cat extends Animal {
16. public String noise() { return "meow"; }
17. }
...
30. Animal animal = new Dog();
31. Cat cat = (Cat)animal;
32. System.out.println(cat.noise());

Answer = An exception is thrown at runtime.


8.Ex:
interface Jumper { public void jump(); }
...
20. class Animal {}
...
30. class Dog extends Animal {
31. Tail tail;
32. }
...
40. class Beagle extends Dog implements Jumper{
41. public void jump() {} 
42. }
...
50. class Cat implements Jumper{
51. public void jump() {}
52. }
Which three are true? (Choose three.)
Answer = 
A. Cat is-a Jumper
B. Dog is-a Animal
C. Beagle has-a Tail


9.Ex:
public class SuperCalc {
11. protected static int multiply(int a, int b) { return a * b;}
12. }
and:
20. public class SubCalc extends SuperCalc{
21. public static int multiply(int a, int b) {
22. int c = super.multiply(a, b);
23. return c;
24. }
25. }
and:
30. SubCalc sc = new SubCalc ();
31. System.out.println(sc.multiply(3,4));
32. System.out.println(SubCalc.multiply(2,2));
What is the result?

Answer = Compilation fails because of an error in line 22.

10.Ex:
class TestA {
2. public void start() { System.out.println("TestA"); }
3. }
4. public class TestB extends TestA {
5. public void start() { System.out.println("TestB"); }
6. public static void main(String[] args) {
7. ((TestA)new TestB()).start();
8. }
9. }
What is the result?
Answer = TestB

11.Ex:
class A {
12. void process() throws Exception { throw new Exception(); }
13. }
14. class B extends A {
15. void process() { System.out.println("B"); }
16. }
17. public static void main(String[] args) {
18. new B().process();
19. }
What is the result?
Answer = B

12.Ex:
class Clidders {
public final void flipper() { System.out.println("Flip a Clidder"); }
}
public class Clidlets extends Clidders {
public void flipper() {
System.out.println("Flip a Clidlet");
super.flipper();
}
public static void main(String [] args) {
new Clidlets().flipper();
}}
What is the result?
Answer = Compilation fails.

13.Ex:
class Zing {
2. protected Hmpf h;
3. }
4. class Woop extends Zing { }
5. class Hmpf { }
Which is true? (Choose all that apply.)
Answer =  Woop has-a Hmpf and Woop is-a Zing.

14.Ex:
What would be the result of attempting to compile and run the following code?
public class TestClass
{
   public static void main(String args[])
   {
      B c = new C();
      System.out.println(c.max(10, 20));
   }
}
class A
{
   int max(int x, int y)  { if (x>y) return x; else return y; }
}
class B extends A
{
  int max(int x, int y)  {  return 2 * super.max(x, y) ; }
}
class C extends B
{
  int max(int x, int y)  {  return super.max( 2*x, 2*y); }
}
Select 1 correct option.  
Answer =  The code will compile without errors and will print 80 when run.   


15.Ex:
Consider the following  class... 
class MyString extends String
{
   MyString(){ super(); }
}
The above code will not compile. 
Select 1 correct option. 
a  True   
*b  False 